# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.
require File.expand_path("../../../spec/shared_helper", __FILE__)

require 'sidekiq/testing'
require 'cucumber/rails'
require 'capybara/poltergeist'
require 'webmock'

include SharedHelper

Capybara.current_driver = :poltergeist
Capybara.javascript_driver = :poltergeist
Capybara.default_wait_time = 5

WebMock.disable_net_connect!(allow_localhost: true)

class Cucumber::Rails::World
  require Rails.root.join('spec', 'support', 'common_helper_methods.rb')
  require Rails.root.join('spec', 'support', 'scenario_progress_formatter.rb')

  def locid_for(resource, *commands, **query_components)
    iri = "#{resource.locid}"
    iri << "///#{commands.join('///')}" if commands.any?
    iri << "?#{query_components.to_query}" if query_components.any?
    iri
  end

  # Capybara is smart enough to wait for ajax when not finding elements.
  # In some situations the element is already existent, but has not been updated
  # yet. This is where you need to manually use wait_for_ajax.
  def wait_for_ajax
    counter = 0
    # The condition only works with poltergeist/phantomjs.
    while page.evaluate_script("jQuery.active").to_i > 0
      counter += 1
      sleep(0.1)
      if counter >= 10 * Capybara.default_wait_time
        raise "AJAX request took longer than 5 seconds."
      end
    end
  end
end


# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  CLEAN_MODE = :transaction
  NO_TRANSACTION_CLEAN_MODE = :deletion
  INITIAL_CLEAN_MODE = :truncation
  CLEAN_OPTIONS = {
    except: %w(
      ontology_file_extensions
     file_extension_mime_type_mappings
      proof_statuses
    ),
  }
  DEFAULT_STRATEGY = CLEAN_MODE
  NO_TRANSACTION_STRATEGY = NO_TRANSACTION_CLEAN_MODE, CLEAN_OPTIONS
  STRATEGY =
    if ENV['NO_TRANSACTION']
      NO_TRANSACTION_STRATEGY
    else
      DEFAULT_STRATEGY
    end
  DatabaseCleaner.strategy = INITIAL_CLEAN_MODE, CLEAN_OPTIONS
  DatabaseCleaner.clean

  # Stub Hets:
  # Hets can't access the rails server of cucumber. To make the ontology file
  # accessible for Hets, we provide the file:// URL.
  require Rails.root.join('lib', 'hets.rb')
  module Hets
    def self.qualified_loc_id_for(resource)
      file = Tempfile.create(['hans', resource.file_extension])
      file.write(resource.current_version.raw_data)
      file.close
      "file://#{file.path}"
    end
  end
  # We need seeds in some of the cucumber features - The Selenium generated ones.
  WebMock.allow_net_connect!
  require Rails.root.join('db/seeds.rb') if false #TODO: insert resonable condition here - disabling it to keep tests green
  WebMock.disable_net_connect!(allow_localhost: true)

  DatabaseCleaner.strategy = STRATEGY
rescue NameError => e
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it: #{e.message}."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :transaction

include Warden::Test::Helpers
Warden.test_mode!
